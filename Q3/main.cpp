#include <cstdio>
#include <queue>

using namespace std;

/*
1. 최대힙의 크기는 항상 최소힙의 크기보다 같거나 '1'만큼 더 크다.
2. 최소힙의 모든 원소는 최대힙의 모든 원소보다 항상 크거나 같아야 한다.
    즉, 최소힙의 가장 top() 값은 항상 최대힙의 가장 top() 값 보다 크거나 같아야 한다.
바로 이 2가지 규칙이다. 위의 규칙에 맞게 힙에 데이터를 삽입하는 과정을 보기 전에, 아직 힙에 대해서 잘 모른다면 아래의 글을 읽고 오도록 하자.

가장 초기의 최대힙과 최소힙의 상태는 { } 일 것이다. 아무런 데이터가 존재하지 않는다.
여기에다가 문제의 예시로 나온 { 1, 5, 2, 10, -99, 7, 5 } 를 삽입하는 과정을 통해 그 과정을 알아보자. 위의 규칙을 반드시 지키면서 진행해야 한다.
첫 번째 데이터 = 1.
현재, 최대힙의 크기(0) = 최소힙의 크기(0) 이기 때문에, 이 상태에서 최소힙에 '1'을 삽입해준다면, 최소힙의 크기가 최대힙의 크기가 더 커져버리게 되므로 규칙1에 어긋나게 된다. 따라서, 이 경우에는 '최대힙'에 '1'을 삽입해주자.
★ 최대힙 = { 1 } , 최소힙 = { }
(찐하게 표시된 글씨는 해당 힙에서 가장 top()에 있는 값을 의미합니다.)
두 번째 데이터 = 5
현재, 최대힙의 크기는 1이고, 최소힙의 크기는 0이기 때문에, 이 경우에 최대힙에 '5'를 삽입해준다면, 최대힙의 크기가 최소힙의 크기보다 '2'만큼 더 커져버리기 때문에, 규칙1에 어긋나게 된다. 따라서, 이 경우에는 '최소힙'에 '5'를 삽입해주자.
최소힙에 '5'를 삽입하더라도, 2번규칙 또한 어긋나지 않기 때문에 그대로 삽입해주자.
★ 최대힙 = { 1 } , 최소힙 = { 5 }
세 번째 데이터 = 2
현재, 최대힙의 크기(1) = 최소힙의 크기(1) 이므로, 규칙1을 위반하지 않기 위해서, 최대힙에 '2'를 삽입해주자.
★ 최대힙 = { 2 , 1 } , 최소힙 = { 5 }
네 번째 데이터 = 10
규칙1을 위반하지 않기 위해서, 최소힙에 삽입을 해주자. 최소힙에 '10'을 삽입하더라도, 규칙2 또한 어긋나지 않게 된다.
★ 최대힙 = { 2 , 1 } , 최소힙 = { 5 , 10 }
다섯번째 데이터 = -99
규칙1을 위반하지 않기 위해서, 최대힙에 삽입을 해주자.
★ 최대힙 = { 2 , 1 , -99 } , 최소힙 = { 5 , 10 }
여섯번째 데이터 = 7
규칙1을 위반하지 않기 위해서, 최소힙에 삽입을 해주자. 삽입하더라도 규칙2 또한 어긋나지지 않는다.
★ 최대힙 = { 2 , 1 , -99 } , 최소힙 = { 5 , 7 , 10 }
마지막 데이터 = 5
규칙1을 위반하지 않기 위해서, 최대힙에 삽입을 해주자.
★ 최대힙 = { 5 , 2 , 1 , -99 } , 최소힙 = { 5 , 7 , 10 }
삽입하더라도, 최대힙의 top()값인 '5'는 최소힙의 top()값인 '5'보다 작거나 같기 때문에 규칙2에도 어긋나지 않는다.
이렇게 모든 데이터를 삽입해보았다.
그런데 중간값은 어떻게 찾을까 ???
본인이 위에 과정을 진행하면서, 데이터를 규칙에 맞게 하나씩 넣을 때 마다, 최대힙과 최소힙의 상태를 표현했었다.
눈에 띄게 표현하기 위해서 앞에 '★' 를 달아놓았다. 이 때, 최대힙의 top() 값들을 한번 보자.
최대힙의 top()값들을 순서대로 출력하면 그게 중간값이다.

위의 예시에는 규칙2를 위반하는 경우가 없는데 위반할 경우에는, 최대힙의 top()값과 최소힙의 top()값을 swap해주면 된다.
예를 들어서 { 1 , -1 } 을 삽입하는 경우를 보자.
중간값을 출력하라면 답은 1 , -1을 순차적으로 출력해야 한다.
먼저 최대힙에 '1'을 담는다. 그 후, 최소힙에 '-1'을 삽입한다. 그런데, 이는 규칙2를 위반하게 된다.
따라서 최대힙과 최소힙의 top()값들을 서로 바꿔주게 되면,
최대힙 = { -1 } 이 되고, 최소힙은 { 1 } 이 된다. 마찬가지로,
현재 상태에서의 최대힙의 top()값을 출력하게 되면 그 값이 중간값이 된다.
 */


void heapSovle(int * arr)
{
    priority_queue<int> Max_heap, Min_heap;



}


int main()
{
    int num;
    int inputArr[100001];
    scanf_s("%d", &num, sizeof(num));

    for (int i = 0; i < num; i++)
    {
        scanf_s("%d", inputArr[i], sizeof(int32_t));
    }
    heapSovle(inputArr);

    return 0;
}
